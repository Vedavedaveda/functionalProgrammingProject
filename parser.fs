// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 1 "parser.fsy"


# 9 "parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | TRUE
  | FALSE
  | WRITE
  | READ
  | EOF
  | FUNC
  | LET
  | IN
  | IF
  | THEN
  | ELSE
  | EQ
  | LPAR
  | RPAR
  | COMMA
  | SEMICOLON
  | ANDAND
  | BANGEQ
  | BARBAR
  | EQEQ
  | GT
  | GTEQ
  | LT
  | LTEQ
  | MINUS
  | PCT
  | PLUS
  | SLASH
  | STAR
  | NAME of (string)
  | INT of (int)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_TRUE
    | TOKEN_FALSE
    | TOKEN_WRITE
    | TOKEN_READ
    | TOKEN_EOF
    | TOKEN_FUNC
    | TOKEN_LET
    | TOKEN_IN
    | TOKEN_IF
    | TOKEN_THEN
    | TOKEN_ELSE
    | TOKEN_EQ
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_COMMA
    | TOKEN_SEMICOLON
    | TOKEN_ANDAND
    | TOKEN_BANGEQ
    | TOKEN_BARBAR
    | TOKEN_EQEQ
    | TOKEN_GT
    | TOKEN_GTEQ
    | TOKEN_LT
    | TOKEN_LTEQ
    | TOKEN_MINUS
    | TOKEN_PCT
    | TOKEN_PLUS
    | TOKEN_SLASH
    | TOKEN_STAR
    | TOKEN_NAME
    | TOKEN_INT
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startprog
    | NONTERM_exp
    | NONTERM_exps
    | NONTERM_explist
    | NONTERM_names
    | NONTERM_namelist
    | NONTERM_def
    | NONTERM_defs
    | NONTERM_prog

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | TRUE  -> 0 
  | FALSE  -> 1 
  | WRITE  -> 2 
  | READ  -> 3 
  | EOF  -> 4 
  | FUNC  -> 5 
  | LET  -> 6 
  | IN  -> 7 
  | IF  -> 8 
  | THEN  -> 9 
  | ELSE  -> 10 
  | EQ  -> 11 
  | LPAR  -> 12 
  | RPAR  -> 13 
  | COMMA  -> 14 
  | SEMICOLON  -> 15 
  | ANDAND  -> 16 
  | BANGEQ  -> 17 
  | BARBAR  -> 18 
  | EQEQ  -> 19 
  | GT  -> 20 
  | GTEQ  -> 21 
  | LT  -> 22 
  | LTEQ  -> 23 
  | MINUS  -> 24 
  | PCT  -> 25 
  | PLUS  -> 26 
  | SLASH  -> 27 
  | STAR  -> 28 
  | NAME _ -> 29 
  | INT _ -> 30 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_TRUE 
  | 1 -> TOKEN_FALSE 
  | 2 -> TOKEN_WRITE 
  | 3 -> TOKEN_READ 
  | 4 -> TOKEN_EOF 
  | 5 -> TOKEN_FUNC 
  | 6 -> TOKEN_LET 
  | 7 -> TOKEN_IN 
  | 8 -> TOKEN_IF 
  | 9 -> TOKEN_THEN 
  | 10 -> TOKEN_ELSE 
  | 11 -> TOKEN_EQ 
  | 12 -> TOKEN_LPAR 
  | 13 -> TOKEN_RPAR 
  | 14 -> TOKEN_COMMA 
  | 15 -> TOKEN_SEMICOLON 
  | 16 -> TOKEN_ANDAND 
  | 17 -> TOKEN_BANGEQ 
  | 18 -> TOKEN_BARBAR 
  | 19 -> TOKEN_EQEQ 
  | 20 -> TOKEN_GT 
  | 21 -> TOKEN_GTEQ 
  | 22 -> TOKEN_LT 
  | 23 -> TOKEN_LTEQ 
  | 24 -> TOKEN_MINUS 
  | 25 -> TOKEN_PCT 
  | 26 -> TOKEN_PLUS 
  | 27 -> TOKEN_SLASH 
  | 28 -> TOKEN_STAR 
  | 29 -> TOKEN_NAME 
  | 30 -> TOKEN_INT 
  | 33 -> TOKEN_end_of_input
  | 31 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startprog 
    | 1 -> NONTERM_exp 
    | 2 -> NONTERM_exp 
    | 3 -> NONTERM_exp 
    | 4 -> NONTERM_exp 
    | 5 -> NONTERM_exp 
    | 6 -> NONTERM_exp 
    | 7 -> NONTERM_exp 
    | 8 -> NONTERM_exp 
    | 9 -> NONTERM_exp 
    | 10 -> NONTERM_exp 
    | 11 -> NONTERM_exp 
    | 12 -> NONTERM_exp 
    | 13 -> NONTERM_exp 
    | 14 -> NONTERM_exp 
    | 15 -> NONTERM_exp 
    | 16 -> NONTERM_exp 
    | 17 -> NONTERM_exp 
    | 18 -> NONTERM_exp 
    | 19 -> NONTERM_exp 
    | 20 -> NONTERM_exp 
    | 21 -> NONTERM_exp 
    | 22 -> NONTERM_exp 
    | 23 -> NONTERM_exps 
    | 24 -> NONTERM_exps 
    | 25 -> NONTERM_explist 
    | 26 -> NONTERM_explist 
    | 27 -> NONTERM_names 
    | 28 -> NONTERM_names 
    | 29 -> NONTERM_namelist 
    | 30 -> NONTERM_namelist 
    | 31 -> NONTERM_def 
    | 32 -> NONTERM_defs 
    | 33 -> NONTERM_defs 
    | 34 -> NONTERM_prog 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 33 
let _fsyacc_tagOfErrorTerminal = 31

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | TRUE  -> "TRUE" 
  | FALSE  -> "FALSE" 
  | WRITE  -> "WRITE" 
  | READ  -> "READ" 
  | EOF  -> "EOF" 
  | FUNC  -> "FUNC" 
  | LET  -> "LET" 
  | IN  -> "IN" 
  | IF  -> "IF" 
  | THEN  -> "THEN" 
  | ELSE  -> "ELSE" 
  | EQ  -> "EQ" 
  | LPAR  -> "LPAR" 
  | RPAR  -> "RPAR" 
  | COMMA  -> "COMMA" 
  | SEMICOLON  -> "SEMICOLON" 
  | ANDAND  -> "ANDAND" 
  | BANGEQ  -> "BANGEQ" 
  | BARBAR  -> "BARBAR" 
  | EQEQ  -> "EQEQ" 
  | GT  -> "GT" 
  | GTEQ  -> "GTEQ" 
  | LT  -> "LT" 
  | LTEQ  -> "LTEQ" 
  | MINUS  -> "MINUS" 
  | PCT  -> "PCT" 
  | PLUS  -> "PLUS" 
  | SLASH  -> "SLASH" 
  | STAR  -> "STAR" 
  | NAME _ -> "NAME" 
  | INT _ -> "INT" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | TRUE  -> (null : System.Object) 
  | FALSE  -> (null : System.Object) 
  | WRITE  -> (null : System.Object) 
  | READ  -> (null : System.Object) 
  | EOF  -> (null : System.Object) 
  | FUNC  -> (null : System.Object) 
  | LET  -> (null : System.Object) 
  | IN  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | THEN  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | LPAR  -> (null : System.Object) 
  | RPAR  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | SEMICOLON  -> (null : System.Object) 
  | ANDAND  -> (null : System.Object) 
  | BANGEQ  -> (null : System.Object) 
  | BARBAR  -> (null : System.Object) 
  | EQEQ  -> (null : System.Object) 
  | GT  -> (null : System.Object) 
  | GTEQ  -> (null : System.Object) 
  | LT  -> (null : System.Object) 
  | LTEQ  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | PCT  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | SLASH  -> (null : System.Object) 
  | STAR  -> (null : System.Object) 
  | NAME _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 25us; 65535us; 3us; 4us; 29us; 6us; 30us; 7us; 31us; 8us; 32us; 9us; 33us; 10us; 34us; 11us; 35us; 12us; 36us; 13us; 37us; 14us; 38us; 15us; 39us; 16us; 40us; 17us; 42us; 26us; 45us; 18us; 46us; 19us; 49us; 20us; 50us; 21us; 51us; 22us; 52us; 23us; 53us; 24us; 54us; 25us; 57us; 26us; 68us; 27us; 72us; 28us; 1us; 65535us; 42us; 43us; 2us; 65535us; 42us; 56us; 57us; 58us; 1us; 65535us; 65us; 66us; 2us; 65535us; 61us; 62us; 65us; 59us; 2us; 65535us; 0us; 70us; 70us; 70us; 2us; 65535us; 0us; 72us; 70us; 71us; 1us; 65535us; 0us; 1us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 27us; 29us; 32us; 34us; 37us; 40us; 43us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 2us; 14us; 2us; 4us; 5us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 13us; 14us; 17us; 18us; 2us; 3us; 16us; 14us; 4us; 4us; 5us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 13us; 14us; 17us; 18us; 14us; 4us; 5us; 5us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 13us; 14us; 17us; 18us; 14us; 4us; 5us; 6us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 13us; 14us; 17us; 18us; 14us; 4us; 5us; 6us; 7us; 7us; 8us; 9us; 10us; 11us; 12us; 13us; 14us; 17us; 18us; 14us; 4us; 5us; 6us; 7us; 8us; 8us; 9us; 10us; 11us; 12us; 13us; 14us; 17us; 18us; 14us; 4us; 5us; 6us; 7us; 8us; 9us; 9us; 10us; 11us; 12us; 13us; 14us; 17us; 18us; 14us; 4us; 5us; 6us; 7us; 8us; 9us; 10us; 10us; 11us; 12us; 13us; 14us; 17us; 18us; 14us; 4us; 5us; 6us; 7us; 8us; 9us; 10us; 11us; 11us; 12us; 13us; 14us; 17us; 18us; 14us; 4us; 5us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 12us; 13us; 14us; 17us; 18us; 14us; 4us; 5us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 13us; 13us; 14us; 17us; 18us; 14us; 4us; 5us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 13us; 14us; 14us; 17us; 18us; 14us; 4us; 5us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 13us; 14us; 15us; 17us; 18us; 14us; 4us; 5us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 13us; 14us; 17us; 17us; 18us; 14us; 4us; 5us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 13us; 14us; 17us; 18us; 18us; 14us; 4us; 5us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 13us; 14us; 17us; 18us; 19us; 14us; 4us; 5us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 13us; 14us; 17us; 18us; 19us; 14us; 4us; 5us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 13us; 14us; 17us; 18us; 20us; 14us; 4us; 5us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 13us; 14us; 17us; 18us; 20us; 14us; 4us; 5us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 13us; 14us; 17us; 18us; 20us; 14us; 4us; 5us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 13us; 14us; 17us; 18us; 21us; 15us; 4us; 5us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 13us; 14us; 17us; 18us; 25us; 26us; 14us; 4us; 5us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 13us; 14us; 17us; 18us; 31us; 14us; 4us; 5us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 13us; 14us; 17us; 18us; 34us; 1us; 4us; 1us; 5us; 1us; 6us; 1us; 7us; 1us; 8us; 1us; 9us; 1us; 10us; 1us; 11us; 1us; 12us; 1us; 13us; 1us; 14us; 1us; 15us; 1us; 15us; 1us; 16us; 1us; 16us; 1us; 16us; 1us; 17us; 1us; 18us; 1us; 19us; 1us; 19us; 1us; 19us; 1us; 19us; 1us; 20us; 1us; 20us; 1us; 20us; 1us; 21us; 1us; 22us; 1us; 24us; 1us; 26us; 1us; 26us; 1us; 28us; 2us; 29us; 30us; 1us; 30us; 1us; 30us; 1us; 31us; 1us; 31us; 1us; 31us; 1us; 31us; 1us; 31us; 1us; 31us; 1us; 31us; 1us; 33us; 1us; 33us; 1us; 34us; 1us; 34us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 23us; 26us; 41us; 56us; 71us; 86us; 101us; 116us; 131us; 146us; 161us; 176us; 191us; 206us; 221us; 236us; 251us; 266us; 281us; 296us; 311us; 326us; 342us; 357us; 372us; 374us; 376us; 378us; 380us; 382us; 384us; 386us; 388us; 390us; 392us; 394us; 396us; 398us; 400us; 402us; 404us; 406us; 408us; 410us; 412us; 414us; 416us; 418us; 420us; 422us; 424us; 426us; 428us; 430us; 432us; 434us; 437us; 439us; 441us; 443us; 445us; 447us; 449us; 451us; 453us; 455us; 457us; 459us; 461us; |]
let _fsyacc_action_rows = 74
let _fsyacc_actionTableElements = [|1us; 16416us; 5us; 63us; 0us; 49152us; 0us; 16385us; 8us; 32768us; 2us; 54us; 3us; 55us; 6us; 47us; 8us; 51us; 12us; 40us; 24us; 3us; 29us; 5us; 30us; 2us; 3us; 16386us; 25us; 33us; 27us; 32us; 28us; 31us; 1us; 16387us; 12us; 42us; 3us; 16388us; 25us; 33us; 27us; 32us; 28us; 31us; 3us; 16389us; 25us; 33us; 27us; 32us; 28us; 31us; 0us; 16390us; 0us; 16391us; 0us; 16392us; 5us; 16393us; 24us; 30us; 25us; 33us; 26us; 29us; 27us; 32us; 28us; 31us; 5us; 16394us; 24us; 30us; 25us; 33us; 26us; 29us; 27us; 32us; 28us; 31us; 5us; 16395us; 24us; 30us; 25us; 33us; 26us; 29us; 27us; 32us; 28us; 31us; 5us; 16396us; 24us; 30us; 25us; 33us; 26us; 29us; 27us; 32us; 28us; 31us; 5us; 16397us; 24us; 30us; 25us; 33us; 26us; 29us; 27us; 32us; 28us; 31us; 5us; 16398us; 24us; 30us; 25us; 33us; 26us; 29us; 27us; 32us; 28us; 31us; 14us; 32768us; 13us; 41us; 16us; 45us; 17us; 35us; 18us; 46us; 19us; 34us; 20us; 38us; 21us; 39us; 22us; 36us; 23us; 37us; 24us; 30us; 25us; 33us; 26us; 29us; 27us; 32us; 28us; 31us; 11us; 16401us; 17us; 35us; 19us; 34us; 20us; 38us; 21us; 39us; 22us; 36us; 23us; 37us; 24us; 30us; 25us; 33us; 26us; 29us; 27us; 32us; 28us; 31us; 12us; 16402us; 16us; 45us; 17us; 35us; 19us; 34us; 20us; 38us; 21us; 39us; 22us; 36us; 23us; 37us; 24us; 30us; 25us; 33us; 26us; 29us; 27us; 32us; 28us; 31us; 14us; 32768us; 7us; 50us; 16us; 45us; 17us; 35us; 18us; 46us; 19us; 34us; 20us; 38us; 21us; 39us; 22us; 36us; 23us; 37us; 24us; 30us; 25us; 33us; 26us; 29us; 27us; 32us; 28us; 31us; 13us; 16403us; 16us; 45us; 17us; 35us; 18us; 46us; 19us; 34us; 20us; 38us; 21us; 39us; 22us; 36us; 23us; 37us; 24us; 30us; 25us; 33us; 26us; 29us; 27us; 32us; 28us; 31us; 14us; 32768us; 9us; 52us; 16us; 45us; 17us; 35us; 18us; 46us; 19us; 34us; 20us; 38us; 21us; 39us; 22us; 36us; 23us; 37us; 24us; 30us; 25us; 33us; 26us; 29us; 27us; 32us; 28us; 31us; 14us; 32768us; 10us; 53us; 16us; 45us; 17us; 35us; 18us; 46us; 19us; 34us; 20us; 38us; 21us; 39us; 22us; 36us; 23us; 37us; 24us; 30us; 25us; 33us; 26us; 29us; 27us; 32us; 28us; 31us; 13us; 16404us; 16us; 45us; 17us; 35us; 18us; 46us; 19us; 34us; 20us; 38us; 21us; 39us; 22us; 36us; 23us; 37us; 24us; 30us; 25us; 33us; 26us; 29us; 27us; 32us; 28us; 31us; 13us; 16405us; 16us; 45us; 17us; 35us; 18us; 46us; 19us; 34us; 20us; 38us; 21us; 39us; 22us; 36us; 23us; 37us; 24us; 30us; 25us; 33us; 26us; 29us; 27us; 32us; 28us; 31us; 14us; 16409us; 14us; 57us; 16us; 45us; 17us; 35us; 18us; 46us; 19us; 34us; 20us; 38us; 21us; 39us; 22us; 36us; 23us; 37us; 24us; 30us; 25us; 33us; 26us; 29us; 27us; 32us; 28us; 31us; 14us; 32768us; 15us; 69us; 16us; 45us; 17us; 35us; 18us; 46us; 19us; 34us; 20us; 38us; 21us; 39us; 22us; 36us; 23us; 37us; 24us; 30us; 25us; 33us; 26us; 29us; 27us; 32us; 28us; 31us; 14us; 32768us; 4us; 73us; 16us; 45us; 17us; 35us; 18us; 46us; 19us; 34us; 20us; 38us; 21us; 39us; 22us; 36us; 23us; 37us; 24us; 30us; 25us; 33us; 26us; 29us; 27us; 32us; 28us; 31us; 8us; 32768us; 2us; 54us; 3us; 55us; 6us; 47us; 8us; 51us; 12us; 40us; 24us; 3us; 29us; 5us; 30us; 2us; 8us; 32768us; 2us; 54us; 3us; 55us; 6us; 47us; 8us; 51us; 12us; 40us; 24us; 3us; 29us; 5us; 30us; 2us; 8us; 32768us; 2us; 54us; 3us; 55us; 6us; 47us; 8us; 51us; 12us; 40us; 24us; 3us; 29us; 5us; 30us; 2us; 8us; 32768us; 2us; 54us; 3us; 55us; 6us; 47us; 8us; 51us; 12us; 40us; 24us; 3us; 29us; 5us; 30us; 2us; 8us; 32768us; 2us; 54us; 3us; 55us; 6us; 47us; 8us; 51us; 12us; 40us; 24us; 3us; 29us; 5us; 30us; 2us; 8us; 32768us; 2us; 54us; 3us; 55us; 6us; 47us; 8us; 51us; 12us; 40us; 24us; 3us; 29us; 5us; 30us; 2us; 8us; 32768us; 2us; 54us; 3us; 55us; 6us; 47us; 8us; 51us; 12us; 40us; 24us; 3us; 29us; 5us; 30us; 2us; 8us; 32768us; 2us; 54us; 3us; 55us; 6us; 47us; 8us; 51us; 12us; 40us; 24us; 3us; 29us; 5us; 30us; 2us; 8us; 32768us; 2us; 54us; 3us; 55us; 6us; 47us; 8us; 51us; 12us; 40us; 24us; 3us; 29us; 5us; 30us; 2us; 8us; 32768us; 2us; 54us; 3us; 55us; 6us; 47us; 8us; 51us; 12us; 40us; 24us; 3us; 29us; 5us; 30us; 2us; 8us; 32768us; 2us; 54us; 3us; 55us; 6us; 47us; 8us; 51us; 12us; 40us; 24us; 3us; 29us; 5us; 30us; 2us; 8us; 32768us; 2us; 54us; 3us; 55us; 6us; 47us; 8us; 51us; 12us; 40us; 24us; 3us; 29us; 5us; 30us; 2us; 0us; 16399us; 8us; 16407us; 2us; 54us; 3us; 55us; 6us; 47us; 8us; 51us; 12us; 40us; 24us; 3us; 29us; 5us; 30us; 2us; 1us; 32768us; 13us; 44us; 0us; 16400us; 8us; 32768us; 2us; 54us; 3us; 55us; 6us; 47us; 8us; 51us; 12us; 40us; 24us; 3us; 29us; 5us; 30us; 2us; 8us; 32768us; 2us; 54us; 3us; 55us; 6us; 47us; 8us; 51us; 12us; 40us; 24us; 3us; 29us; 5us; 30us; 2us; 1us; 32768us; 29us; 48us; 1us; 32768us; 11us; 49us; 8us; 32768us; 2us; 54us; 3us; 55us; 6us; 47us; 8us; 51us; 12us; 40us; 24us; 3us; 29us; 5us; 30us; 2us; 8us; 32768us; 2us; 54us; 3us; 55us; 6us; 47us; 8us; 51us; 12us; 40us; 24us; 3us; 29us; 5us; 30us; 2us; 8us; 32768us; 2us; 54us; 3us; 55us; 6us; 47us; 8us; 51us; 12us; 40us; 24us; 3us; 29us; 5us; 30us; 2us; 8us; 32768us; 2us; 54us; 3us; 55us; 6us; 47us; 8us; 51us; 12us; 40us; 24us; 3us; 29us; 5us; 30us; 2us; 8us; 32768us; 2us; 54us; 3us; 55us; 6us; 47us; 8us; 51us; 12us; 40us; 24us; 3us; 29us; 5us; 30us; 2us; 8us; 32768us; 2us; 54us; 3us; 55us; 6us; 47us; 8us; 51us; 12us; 40us; 24us; 3us; 29us; 5us; 30us; 2us; 0us; 16406us; 0us; 16408us; 8us; 32768us; 2us; 54us; 3us; 55us; 6us; 47us; 8us; 51us; 12us; 40us; 24us; 3us; 29us; 5us; 30us; 2us; 0us; 16410us; 0us; 16412us; 1us; 16413us; 14us; 61us; 1us; 32768us; 29us; 60us; 0us; 16414us; 1us; 32768us; 29us; 64us; 1us; 32768us; 12us; 65us; 1us; 16411us; 29us; 60us; 1us; 32768us; 13us; 67us; 1us; 32768us; 11us; 68us; 8us; 32768us; 2us; 54us; 3us; 55us; 6us; 47us; 8us; 51us; 12us; 40us; 24us; 3us; 29us; 5us; 30us; 2us; 0us; 16415us; 1us; 16416us; 5us; 63us; 0us; 16417us; 8us; 32768us; 2us; 54us; 3us; 55us; 6us; 47us; 8us; 51us; 12us; 40us; 24us; 3us; 29us; 5us; 30us; 2us; 0us; 16418us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 2us; 3us; 4us; 13us; 17us; 19us; 23us; 27us; 28us; 29us; 30us; 36us; 42us; 48us; 54us; 60us; 66us; 81us; 93us; 106us; 121us; 135us; 150us; 165us; 179us; 193us; 208us; 223us; 238us; 247us; 256us; 265us; 274us; 283us; 292us; 301us; 310us; 319us; 328us; 337us; 346us; 347us; 356us; 358us; 359us; 368us; 377us; 379us; 381us; 390us; 399us; 408us; 417us; 426us; 435us; 436us; 437us; 446us; 447us; 448us; 450us; 452us; 453us; 455us; 457us; 459us; 461us; 463us; 472us; 473us; 475us; 476us; 485us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 1us; 2us; 1us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 4us; 3us; 3us; 6us; 6us; 2us; 1us; 0us; 1us; 1us; 3us; 0us; 1us; 1us; 3us; 8us; 0us; 2us; 3us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 2us; 2us; 3us; 3us; 4us; 4us; 5us; 5us; 6us; 7us; 7us; 8us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 16385us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16399us; 65535us; 65535us; 16400us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16406us; 16408us; 65535us; 16410us; 16412us; 65535us; 65535us; 16414us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16415us; 65535us; 16417us; 65535us; 16418us; |]
let _fsyacc_reductions ()  =    [| 
# 286 "parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Syntax.program in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : 'gentype__startprog));
# 295 "parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 40 "parser.fsy"
                                                            Syntax.INT _1 
                   )
# 40 "parser.fsy"
                 : Syntax.exp));
# 306 "parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> Syntax.exp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 41 "parser.fsy"
                                                            Syntax.UNARY_MINUS(_2) 
                   )
# 41 "parser.fsy"
                 : Syntax.exp));
# 317 "parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 42 "parser.fsy"
                                                            match _1 with
                                                             | "true"  -> Syntax.BOOL true
                                                             | "false" -> Syntax.BOOL false
                                                             | _       ->  Syntax.VAR _1 
                   )
# 42 "parser.fsy"
                 : Syntax.exp));
# 331 "parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Syntax.exp in
            let _3 = parseState.GetInput(3) :?> Syntax.exp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 46 "parser.fsy"
                                                            Syntax.ADD(_1, _3) 
                   )
# 46 "parser.fsy"
                 : Syntax.exp));
# 343 "parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Syntax.exp in
            let _3 = parseState.GetInput(3) :?> Syntax.exp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 47 "parser.fsy"
                                                            Syntax.SUB(_1, _3) 
                   )
# 47 "parser.fsy"
                 : Syntax.exp));
# 355 "parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Syntax.exp in
            let _3 = parseState.GetInput(3) :?> Syntax.exp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 48 "parser.fsy"
                                                            Syntax.MUL(_1, _3) 
                   )
# 48 "parser.fsy"
                 : Syntax.exp));
# 367 "parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Syntax.exp in
            let _3 = parseState.GetInput(3) :?> Syntax.exp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 49 "parser.fsy"
                                                            Syntax.DIV(_1, _3) 
                   )
# 49 "parser.fsy"
                 : Syntax.exp));
# 379 "parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Syntax.exp in
            let _3 = parseState.GetInput(3) :?> Syntax.exp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 50 "parser.fsy"
                                                            Syntax.MOD(_1, _3) 
                   )
# 50 "parser.fsy"
                 : Syntax.exp));
# 391 "parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Syntax.exp in
            let _3 = parseState.GetInput(3) :?> Syntax.exp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 51 "parser.fsy"
                                                            Syntax.EQ(_1, _3)  
                   )
# 51 "parser.fsy"
                 : Syntax.exp));
# 403 "parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Syntax.exp in
            let _3 = parseState.GetInput(3) :?> Syntax.exp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 52 "parser.fsy"
                                                            Syntax.NEQ(_1, _3) 
                   )
# 52 "parser.fsy"
                 : Syntax.exp));
# 415 "parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Syntax.exp in
            let _3 = parseState.GetInput(3) :?> Syntax.exp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 53 "parser.fsy"
                                                            Syntax.LT(_1, _3)  
                   )
# 53 "parser.fsy"
                 : Syntax.exp));
# 427 "parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Syntax.exp in
            let _3 = parseState.GetInput(3) :?> Syntax.exp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 54 "parser.fsy"
                                                            Syntax.LTE(_1, _3) 
                   )
# 54 "parser.fsy"
                 : Syntax.exp));
# 439 "parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Syntax.exp in
            let _3 = parseState.GetInput(3) :?> Syntax.exp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 55 "parser.fsy"
                                                            Syntax.GT(_1, _3)  
                   )
# 55 "parser.fsy"
                 : Syntax.exp));
# 451 "parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Syntax.exp in
            let _3 = parseState.GetInput(3) :?> Syntax.exp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 56 "parser.fsy"
                                                            Syntax.GTE(_1, _3) 
                   )
# 56 "parser.fsy"
                 : Syntax.exp));
# 463 "parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> Syntax.exp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 57 "parser.fsy"
                                                            _2 
                   )
# 57 "parser.fsy"
                 : Syntax.exp));
# 474 "parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _3 = parseState.GetInput(3) :?> Syntax.exp list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 58 "parser.fsy"
                                                            Syntax.CALL (_1, _3) 
                   )
# 58 "parser.fsy"
                 : Syntax.exp));
# 486 "parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Syntax.exp in
            let _3 = parseState.GetInput(3) :?> Syntax.exp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 59 "parser.fsy"
                                                            Syntax.AND(_1, _3) 
                   )
# 59 "parser.fsy"
                 : Syntax.exp));
# 498 "parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Syntax.exp in
            let _3 = parseState.GetInput(3) :?> Syntax.exp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 60 "parser.fsy"
                                                            Syntax.OR(_1, _3) 
                   )
# 60 "parser.fsy"
                 : Syntax.exp));
# 510 "parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> string in
            let _4 = parseState.GetInput(4) :?> Syntax.exp in
            let _6 = parseState.GetInput(6) :?> Syntax.exp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 61 "parser.fsy"
                                                            Syntax.LET(_2, _4, _6) 
                   )
# 61 "parser.fsy"
                 : Syntax.exp));
# 523 "parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> Syntax.exp in
            let _4 = parseState.GetInput(4) :?> Syntax.exp in
            let _6 = parseState.GetInput(6) :?> Syntax.exp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 62 "parser.fsy"
                                                            Syntax.IF(_2, _4, _6) 
                   )
# 62 "parser.fsy"
                 : Syntax.exp));
# 536 "parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> Syntax.exp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 63 "parser.fsy"
                                                            Syntax.WRITE(_2) 
                   )
# 63 "parser.fsy"
                 : Syntax.exp));
# 547 "parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 64 "parser.fsy"
                                                            Syntax.READ 
                   )
# 64 "parser.fsy"
                 : Syntax.exp));
# 557 "parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 67 "parser.fsy"
                                                            [] 
                   )
# 67 "parser.fsy"
                 : Syntax.exp list));
# 567 "parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Syntax.exp list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 68 "parser.fsy"
                                                            _1 
                   )
# 68 "parser.fsy"
                 : Syntax.exp list));
# 578 "parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Syntax.exp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 71 "parser.fsy"
                                                            [_1] 
                   )
# 71 "parser.fsy"
                 : Syntax.exp list));
# 589 "parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Syntax.exp in
            let _3 = parseState.GetInput(3) :?> Syntax.exp list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 72 "parser.fsy"
                                                            _1 :: _3 
                   )
# 72 "parser.fsy"
                 : Syntax.exp list));
# 601 "parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 74 "parser.fsy"
                                                            [] 
                   )
# 74 "parser.fsy"
                 : string list));
# 611 "parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 75 "parser.fsy"
                                                            _1 
                   )
# 75 "parser.fsy"
                 : string list));
# 622 "parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 77 "parser.fsy"
                                                            [_1] 
                   )
# 77 "parser.fsy"
                 : string list));
# 633 "parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _3 = parseState.GetInput(3) :?> string list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 78 "parser.fsy"
                                                            _1 :: _3 
                   )
# 78 "parser.fsy"
                 : string list));
# 645 "parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> string in
            let _4 = parseState.GetInput(4) :?> string list in
            let _7 = parseState.GetInput(7) :?> Syntax.exp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 81 "parser.fsy"
                                                            (_2, (_4, _7)) 
                   )
# 81 "parser.fsy"
                 : Syntax.funcdef));
# 658 "parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 83 "parser.fsy"
                                                            [] 
                   )
# 83 "parser.fsy"
                 : Syntax.funcdef list));
# 668 "parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Syntax.funcdef in
            let _2 = parseState.GetInput(2) :?> Syntax.funcdef list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 84 "parser.fsy"
                                                            _1 :: _2 
                   )
# 84 "parser.fsy"
                 : Syntax.funcdef list));
# 680 "parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Syntax.funcdef list in
            let _2 = parseState.GetInput(2) :?> Syntax.exp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 86 "parser.fsy"
                                                            (_1, _2) 
                   )
# 86 "parser.fsy"
                 : Syntax.program));
|]
# 693 "parser.fs"
let tables : FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 34;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = tables.Interpret(lexer, lexbuf, startState)
let prog lexer lexbuf : Syntax.program =
    engine lexer lexbuf 0 :?> _
